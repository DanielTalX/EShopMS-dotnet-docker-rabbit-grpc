Section04-TodoAPI
~~~~~~~~~~~~~~~~~
- mini example
- pages 96-108

EshopMicroservices
~~~~~~~~~~~~~~~~~~~

Section05-CatalogAPI-MS - Vertical Slice Architecture and CQRS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Create a blank solution for EshopMicroservices (src)
- Create a ASP.NET Core Empty project called Catalog.API inside Services/Catalog solution
- Set Port Numbers for Catalog.API MS
- Domain Analysis of Catalog MS: Models, UCs, Rest Apis, Databases
- Technical Analysis of Catalog MS: Architectures, Patterns, Libraries
- Vertical Slice Architecture
- Vertical Slice Architecture versus Clean Architecture
- CQRS Design Pattern
- Logical and Physical implementation of CQRS Pattern
- CQRS Design Pattern With MediatR Library (Logical implementation)
- Develop Catalog.API MS creating Domain Entities
- Develop Vertical Slice Feature Folder with CQRS and MediatR
- Develop Feature Handler class with CQRS and MediatR
- Create Abstraction on MediatR for CQRS - Command and Query seperation (BuildingBlocks)
- Implement CQRS Abstractions ICommand into Vertical Slice Feature Handler class
- Develop Create Product Endpoint with Minimal Apis and Carter 
- Develop Post Endpoint with Carter implements ICarterModule for Minimal Apis
- Register MediatR and Carter libraries into ASP.NET Dependency Injection Services
- Test Catalog API - Create Product POST Request - Debug Carter Minimal API and MediatR

Section06-CatalogAPI-MS - Infrastructure, Handler and Endpoint Class
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Opening Sessions in Marten as Document DB
- Develop CommandHandler to Save Product to DB using Marten Library
- Register and Configure Marten DocumentDB Library into Program.cs DI
- Setup PostgreSQL DB using Docker-compose file for multi-container Docker env
- Add PostgreSQL DB image into Docker-compose file for multi-container Docker env
- Run Docker-Compose on Visual Studio to setup PostgreSAL DB on Docker
- Connect Postgres DB from local Catalog Microservices and send POST request
- Develop [GetProducts, GetProductByld, GetProductByCategory, UpdateProduct, DeleteProduct] Feature in Vertical Slice with CORS, MediatR in Handler class
- Develop [GetProducts, GetProductByld, GetProductByCategory, UpdateProduct, DeleteProduct] Endpoint with Minimal Apis and Carter
- Test [GetProducts, GetProductByld, GetProductByCategory, UpdateProduct, DeleteProduct] Endpoint Connecting to Docker Postgres Container

Section07-CatalogAPI-MS-Develop Catalog.API Crosscutting Concerns
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- MediatR Pipeline Behaviours and Fluent Validation Library
- Add Cross-cutting Concerns into BuildingBlocks Class Library for all services
- Cross-cutting Concerns: Validate with AbstractValidator using Fluent Validation
- Remove Manual Validator and Test Validation Pipeline Behaviour with MediatR
- Develop CRUD Command Validators with Fluent Validation Pipeline Behaviour
- BuildingBlocks Handling Exceptions Generic Way app.UseExceptionHandler
- Global Exception Handling with ExceptionHandler interface in Asp.net Core
- Register Custom Exception Handling into Asp.net with AddExceptionHandler method
- Logging Behavior in MediatR Pipeline for Crosscutting concerns
- Seeding CatalogDb with Marten Initial Baseline Data (InitialData interface)
- Pagination for GetProducts Query with ToPagedListAsync extention method
- Health Check for Catalog Microservices with PostgresDB

